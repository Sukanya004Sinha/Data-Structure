String 
String s = "hello"
inside stack one s variable will create and inside somewhere "Hello" will stored
It is not just a character array 
in String there is no method like setChar


String s1 = "hello";
String s2 = "hello";
String s3 = new String ("hello");

interning in String - Suppose if amy String is already there in intern pool so  next time it wil not create on anew address 
that will point to the same address and that is called interning 

Why interning - to optimize space 

can we avoid interning 
yes we can we need to use new so using new it will create a new string on new location 
and will give that address

Implications of Strings 
1. Equals and ==
== its only check the address not content 
equals - > its checks address first and content as well character by character  
in comparison -> Don't use == use equals
in above 
s1==s2 -> true
s1== s3 -> false  

2. Immutability - 
Strings are immutable in nature and because of immutability strings are immutable in nature 
In strings reference is mutable but instance is not 

Impact ->
performance slow 
for(int i =0;i<100;i++){
    s+=i;
}
because if we have 2 string s1 = hello and its size is 2gb  and s2 = world  and its size is 3gb 
so firstly on 4k memory there is hello and on 5k world 
so when it will concatenate it will firstly copy whole s1 data  one by one and then s2 whole data character by character  that's why its performance is very slow

StringBuilder ->
